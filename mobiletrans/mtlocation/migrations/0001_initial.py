# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-17 01:24
from __future__ import unicode_literals

import autoslug.fields
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mobiletrans.mtlocation.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CityBorder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objectid', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=25, null=True)),
                ('shape_area', models.FloatField(blank=True, null=True)),
                ('shape_len', models.FloatField(blank=True, null=True)),
                ('area', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'verbose_name': 'City Border',
                'verbose_name_plural': 'City Borders',
            },
        ),
        migrations.CreateModel(
            name='CTARailLines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objectid', models.IntegerField()),
                ('segment_id', models.IntegerField()),
                ('asset_id', models.IntegerField()),
                ('transit_lines', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('type', models.IntegerField()),
                ('legend', models.CharField(max_length=5)),
                ('alt_legend', models.CharField(max_length=5)),
                ('branch', models.CharField(max_length=50)),
                ('shape_len', models.FloatField()),
                ('line', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
            ],
            options={
                'verbose_name': 'Transit Line',
                'verbose_name_plural': 'Transit Lines',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=b'name')),
                ('point', django.contrib.gis.db.models.fields.PointField(help_text=b'Represented as (longitude, lattitude)', srid=4326)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
            },
            managers=[
                ('sub_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=b'name')),
                ('area', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Region',
            },
            managers=[
                ('sub_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TransitRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('route_id', models.CharField(help_text=b'Required. The route_id field contains an ID that uniquely identifies a route. The route_id is dataset unique.', max_length=64)),
                ('short_name', models.CharField(help_text=b'Required. The route_short_name contains the short name of a route. This will often be a short, abstract identifier like "32", "100X", or "Green" that riders use to identify a route, but which doesn\'t give any indication of what places the route serves. If the route does not have a short name, please specify a route_long_name and use an empty string as the value for this field.', max_length=64)),
                ('long_name', models.CharField(help_text=b"Required. The route_long_name contains the full name of a route. This name is generally more descriptive than the route_short_name and will often include the route's destination or stop. If the route does not have a long name, please specify a route_short_name and use an empty string as the value for this field.", max_length=255)),
                ('description', models.TextField(blank=True, help_text=b'Optional. The route_desc field contains a description of a route. Please provide useful, quality information. Do not simply duplicate the name of the route. For example, "A trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM until about midnight, additional A trains operate between Inwood-207 St and Lefferts Boulevard (trains typically alternate between Lefferts Blvd and Far Rockaway)."', null=True)),
                ('type', models.IntegerField(choices=[(0, b'Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.'), (1, b'Subway, Metro. Any underground rail system within a metropolitan area.'), (2, b'Rail. Used for intercity or long-distance travel.'), (3, b'Bus. Used for short- and long-distance bus routes.'), (4, b'Ferry. Used for short- and long-distance boat service.'), (5, b'Cable car. Used for street-level cable cars where the cable runs beneath the car.'), (6, b'Gondola, Suspended cable car. Typically used for aerial cable cars where the car is suspended from the cable.'), (7, b'Funicular. Any rail system designed for steep inclines.')], help_text=b'Required. The route_type field describes the type of transportation used on a route.')),
                ('color', models.CharField(blank=True, help_text=b'Optional. In systems that have colors assigned to routes, the route_color field defines a color that corresponds to a route. The color must be provided as a six-character hexadecimal number, for example, 00FFFF. If no color is specified, the default route color is white (FFFFFF).', max_length=6, null=True)),
                ('text_color', models.CharField(blank=True, help_text=b'Optional. The route_text_color field can be used to specify a legible color to use for text drawn against a background of route_color. The color must be provided as a six-character hexadecimal number, for example, FFD700. If no color is specified, the default text color is black (000000).', max_length=6, null=True)),
                ('url', models.URLField(blank=True, help_text=b'Optional. The route_url field contains the URL of a web page about that particular route. This should be different from the agency_url.', null=True)),
            ],
            options={
                'verbose_name': 'Transit Route',
                'verbose_name_plural': 'Transit Routes',
            },
        ),
        migrations.CreateModel(
            name='GPlace',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('vicinity', models.TextField(blank=True, null=True)),
                ('types', mobiletrans.mtlocation.fields.SeparatedValuesField(blank=True, null=True)),
                ('reference', models.CharField(blank=True, max_length=1024, null=True)),
                ('international_phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('local_phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Google Place',
                'verbose_name_plural': 'Google Places',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
            ],
            options={
                'verbose_name': 'Hospital Location',
                'verbose_name_plural': 'Hospital Locations',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='Landmark',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('architect', models.CharField(blank=True, max_length=255, null=True)),
                ('build_date', models.CharField(blank=True, max_length=64, null=True)),
                ('landmark_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Landmark Location',
                'verbose_name_plural': 'Landmark Locations',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('zip', models.CharField(blank=True, max_length=10, null=True)),
                ('hours', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=64, null=True)),
                ('website', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Library Location',
                'verbose_name_plural': 'Library Locations',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('region_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Region')),
                ('long_name', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name': 'Neighborhood Region',
                'verbose_name_plural': 'Neighborhood Regions',
            },
            bases=('mtlocation.region',),
        ),
        migrations.CreateModel(
            name='PoliceStation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
                ('district', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('zip', models.CharField(blank=True, max_length=10, null=True)),
                ('website', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Police Station Location',
                'verbose_name_plural': 'Police Station Locations',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='TransitStop',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Location')),
                ('stop_id', models.IntegerField(help_text=b'Required. The stop_id field contains an ID that uniquely identifies a stop or station. Multiple routes may use the same stop. The stop_id is dataset unique.', unique=True)),
                ('stop_code', models.IntegerField(blank=True, help_text=b'Optional. The stop_code field contains short text or a number that uniquely identifies the stop for passengers. Stop codes are often used in phone-based transit information systems or printed on stop signage to make it easier for riders to get a stop schedule or real-time arrival information for a particular stop.', null=True)),
                ('description', models.TextField(blank=True, help_text=b'Optional. The stop_desc field contains a description of a stop. Please provide useful, quality information. Do not simply duplicate the name of the stop.', null=True)),
                ('url', models.URLField(blank=True, help_text=b'Optional. The stop_url field contains the URL of a web page about a particular stop. This should be different from the agency_url and the route_url fields. ', null=True)),
                ('location_type', models.IntegerField(choices=[(0, b'Stop'), (1, b'Station')], help_text=b'Optional. The location_type field identifies whether this stop ID represents a stop or station. If no location type is specified, or the location_type is blank, stop IDs are treated as stops. Stations may have different properties from stops when they are represented on a map or used in trip planning.')),
                ('route', models.ManyToManyField(blank=True, to='mtlocation.TransitRoute')),
            ],
            options={
                'verbose_name': 'Transit Location',
                'verbose_name_plural': 'Transit Locations',
            },
            bases=('mtlocation.location',),
        ),
        migrations.CreateModel(
            name='Zipcode',
            fields=[
                ('region_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mtlocation.Region')),
            ],
            options={
                'verbose_name': 'Zipcode Region',
                'verbose_name_plural': 'Zipcode Regions',
            },
            bases=('mtlocation.region',),
        ),
        migrations.AddField(
            model_name='region',
            name='content_type',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='location',
            name='content_type',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
    ]
